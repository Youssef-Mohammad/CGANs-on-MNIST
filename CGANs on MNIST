{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import torch\nfrom torch import nn\n\nimport torchvision\nfrom torchvision import transforms\nfrom torchvision.transforms import ToTensor\nfrom torchvision import datasets\nfrom torch.utils.data import DataLoader\n\nimport matplotlib.pyplot as plt\nfrom tqdm.auto import tqdm\n\nprint(torch.__version__)\nprint(torchvision.__version__)","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:48:59.766991Z","iopub.execute_input":"2024-08-12T18:48:59.767846Z","iopub.status.idle":"2024-08-12T18:48:59.774045Z","shell.execute_reply.started":"2024-08-12T18:48:59.767816Z","shell.execute_reply":"2024-08-12T18:48:59.773014Z"},"trusted":true},"execution_count":78,"outputs":[{"name":"stdout","text":"2.1.2\n0.16.2\n","output_type":"stream"}]},{"cell_type":"code","source":"transform = transforms.Compose([\n    transforms.ToTensor(),\n    transforms.Normalize([0.5], [0.5]),  # Normalizes images to [-1, 1] for MNIST\n])","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:48:59.775533Z","iopub.execute_input":"2024-08-12T18:48:59.775815Z","iopub.status.idle":"2024-08-12T18:48:59.793190Z","shell.execute_reply.started":"2024-08-12T18:48:59.775792Z","shell.execute_reply":"2024-08-12T18:48:59.792092Z"},"trusted":true},"execution_count":79,"outputs":[]},{"cell_type":"code","source":"train_data = datasets.MNIST(root=\"data\",\n                                   train=True,\n                                   download=True,\n                                   transform=transform,\n                                   target_transform=None)","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:48:59.794963Z","iopub.execute_input":"2024-08-12T18:48:59.795369Z","iopub.status.idle":"2024-08-12T18:48:59.876187Z","shell.execute_reply.started":"2024-08-12T18:48:59.795338Z","shell.execute_reply":"2024-08-12T18:48:59.875340Z"},"trusted":true},"execution_count":80,"outputs":[]},{"cell_type":"code","source":"train_data.data.shape, test_data.data.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:48:59.877267Z","iopub.execute_input":"2024-08-12T18:48:59.877559Z","iopub.status.idle":"2024-08-12T18:48:59.885137Z","shell.execute_reply.started":"2024-08-12T18:48:59.877534Z","shell.execute_reply":"2024-08-12T18:48:59.884216Z"},"trusted":true},"execution_count":81,"outputs":[{"execution_count":81,"output_type":"execute_result","data":{"text/plain":"(torch.Size([60000, 28, 28]), torch.Size([10000, 28, 28]))"},"metadata":{}}]},{"cell_type":"code","source":"class_names = train_data.classes\nclass_names","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:48:59.887685Z","iopub.execute_input":"2024-08-12T18:48:59.888105Z","iopub.status.idle":"2024-08-12T18:48:59.895712Z","shell.execute_reply.started":"2024-08-12T18:48:59.888074Z","shell.execute_reply":"2024-08-12T18:48:59.894795Z"},"trusted":true},"execution_count":82,"outputs":[{"execution_count":82,"output_type":"execute_result","data":{"text/plain":"['0 - zero',\n '1 - one',\n '2 - two',\n '3 - three',\n '4 - four',\n '5 - five',\n '6 - six',\n '7 - seven',\n '8 - eight',\n '9 - nine']"},"metadata":{}}]},{"cell_type":"code","source":"train_data.targets","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:48:59.896769Z","iopub.execute_input":"2024-08-12T18:48:59.897078Z","iopub.status.idle":"2024-08-12T18:48:59.908397Z","shell.execute_reply.started":"2024-08-12T18:48:59.897047Z","shell.execute_reply":"2024-08-12T18:48:59.907200Z"},"trusted":true},"execution_count":83,"outputs":[{"execution_count":83,"output_type":"execute_result","data":{"text/plain":"tensor([5, 0, 4,  ..., 5, 6, 8])"},"metadata":{}}]},{"cell_type":"code","source":"train_data.targets.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:48:59.909449Z","iopub.execute_input":"2024-08-12T18:48:59.909990Z","iopub.status.idle":"2024-08-12T18:48:59.919339Z","shell.execute_reply.started":"2024-08-12T18:48:59.909966Z","shell.execute_reply":"2024-08-12T18:48:59.918442Z"},"trusted":true},"execution_count":84,"outputs":[{"execution_count":84,"output_type":"execute_result","data":{"text/plain":"torch.Size([60000])"},"metadata":{}}]},{"cell_type":"code","source":"image, label = train_data[0]\nprint(f\"Image Shape: {image.shape} -> [color channels, height, width]\") # Our images are gray_scale!\nprint(f\"Label: {class_names[label]}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:48:59.920482Z","iopub.execute_input":"2024-08-12T18:48:59.920859Z","iopub.status.idle":"2024-08-12T18:48:59.930488Z","shell.execute_reply.started":"2024-08-12T18:48:59.920821Z","shell.execute_reply":"2024-08-12T18:48:59.929711Z"},"trusted":true},"execution_count":85,"outputs":[{"name":"stdout","text":"Image Shape: torch.Size([1, 28, 28]) -> [color channels, height, width]\nLabel: 5 - five\n","output_type":"stream"}]},{"cell_type":"code","source":"plt.imshow(image.squeeze(), cmap=\"gray\")\nplt.title(class_names[label])\nplt.axis(False)","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:48:59.931552Z","iopub.execute_input":"2024-08-12T18:48:59.931843Z","iopub.status.idle":"2024-08-12T18:49:00.108702Z","shell.execute_reply.started":"2024-08-12T18:48:59.931820Z","shell.execute_reply":"2024-08-12T18:49:00.107837Z"},"trusted":true},"execution_count":86,"outputs":[{"execution_count":86,"output_type":"execute_result","data":{"text/plain":"(-0.5, 27.5, 27.5, -0.5)"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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3jQ3NxdvRo0aVbyJiOjTp0/xZtKkSTWddaz55ptvijeLFi0q3kycOLF4s2fPnuJNRMT27duLN++9915NZ/0buVMAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAECqVKvVapteWKl09LXwf4YPH17Tbv369cWb3r1713QWR1Zra2vxZubMmcWbvXv3Fm9qsXPnzpp2P//8c/Hm888/r+msY01bvty7UwAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQBIFAJKnpNapvn371rTbvHlz8aapqamms441tfzZ7dq1q3gzevTo4k1ExIEDB4o3noDL//OUVACKiAIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASKIAQOra2RfAn/vpp59q2t13333Fm2uvvbZ48/HHHxdvFi1aVLyp1SeffFK8GTt2bPFm3759xZtzzz23eBMRMWvWrJp2UMKdAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAUqVarVbb9MJKpaOvhU7Sq1ev4s2ePXuKN0uWLCneRETceuutxZubbrqpePPSSy8Vb+Bo0pYv9+4UAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQunb2BdD5du/efUTO+eWXX47IORERt912W/Fm5cqVxZvW1tbiDdQzdwoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAECqVKvVapteWKl09LVwjOvZs2dNu9dff714c9lllxVvrr766uLNO++8U7yBztKWL/fuFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkDwQj7o3aNCg4s22bduKN7t27SrebNiwoXizdevW4k1ExNNPP128aeNfb/4lPBAPgCKiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQPBCPY9LEiROLN8uWLSvenHjiicWbWj300EPFm+XLlxdvdu7cWbzh6OCBeAAUEQUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgOSBePBf5513XvFmwYIFxZsxY8YUb2q1ZMmS4s2cOXOKN99++23xhiPPA/EAKCIKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgDJA/HgH+jTp0/xZty4cTWdtWzZsuJNLX9v169fX7wZO3Zs8YYjzwPxACgiCgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASJ6SCkeJlpaW4k3Xrl2LNwcPHizeXHXVVcWbjRs3Fm/4ZzwlFYAiogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkMqflgXHqPPPP794M3ny5OLNiBEjijcRtT3crhY7duwo3rz//vsdcCV0BncKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIHohH3RsyZEjx5u677y7eXH/99cWb0047rXhzJB06dKh4s3PnzuJNa2tr8Yb65E4BgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgDJA/GoSS0PgrvxxhtrOquWh9sNHDiwprPq2datW4s3c+bMKd689tprxRuOHe4UAEiiAEASBQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQPBDvGHPqqacWb84555zizVNPPVW8GTp0aPGm3m3evLl48+STT9Z01tq1a4s3ra2tNZ3Fv5c7BQCSKACQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIHlK6hHQt2/f4s2SJUtqOmv48OHFm6ampprOqmcffvhh8Wb+/PnFm3Xr1hVv9u/fX7yBI8WdAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUA0r/6gXgXXXRR8ea+++4r3owcObJ4c8YZZxRv6t2vv/5a027RokXFm8cff7x4s2/fvuINHGvcKQCQRAGAJAoAJFEAIIkCAEkUAEiiAEASBQCSKACQRAGAJAoAJFEAIP2rH4g3ceLEI7I5knbs2FG8eeONN4o3Bw8eLN7Mnz+/eBMRsWvXrpp2QDl3CgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgAkUQAgiQIASRQASJVqtVpt0wsrlY6+FgA6UFu+3LtTACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgCQKACRRACCJAgBJFABIogBAEgUAkigAkEQBgNS1rS+sVqsdeR0A1AF3CgAkUQAgiQIASRQASKIAQBIFAJIoAJBEAYAkCgCk/wC69UjAsc8powAAAABJRU5ErkJggg=="},"metadata":{}}]},{"cell_type":"code","source":"# Show more images\n\nplt.figure(figsize=(9, 9))\nrows, cols = 4, 4\n\nfor i in range(1, rows*cols+1):\n  random_index = torch.randint(1, len(train_data), size=[1]).item()\n\n  plt.subplot(rows, cols, i)\n\n  image, label = train_data[random_index]\n\n  plt.imshow(image.squeeze(), cmap=\"gray\")\n  plt.title(class_names[label])\n  plt.axis(False)","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:49:00.109721Z","iopub.execute_input":"2024-08-12T18:49:00.109991Z","iopub.status.idle":"2024-08-12T18:49:01.086021Z","shell.execute_reply.started":"2024-08-12T18:49:00.109967Z","shell.execute_reply":"2024-08-12T18:49:01.085017Z"},"trusted":true},"execution_count":87,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 900x900 with 16 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"BATCH_SIZE = 128\n\ntrain_data_loader = DataLoader(train_data, BATCH_SIZE, shuffle=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:49:01.090615Z","iopub.execute_input":"2024-08-12T18:49:01.090903Z","iopub.status.idle":"2024-08-12T18:49:01.098760Z","shell.execute_reply.started":"2024-08-12T18:49:01.090878Z","shell.execute_reply":"2024-08-12T18:49:01.097866Z"},"trusted":true},"execution_count":88,"outputs":[]},{"cell_type":"code","source":"print(f\"Length of Training Data loader: {len(train_data_loader)}, Batches of {train_data_loader.batch_size}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:49:01.099840Z","iopub.execute_input":"2024-08-12T18:49:01.100107Z","iopub.status.idle":"2024-08-12T18:49:01.110317Z","shell.execute_reply.started":"2024-08-12T18:49:01.100074Z","shell.execute_reply":"2024-08-12T18:49:01.109509Z"},"trusted":true},"execution_count":89,"outputs":[{"name":"stdout","text":"Length of Training Data loader: 469, Batches of 128\nLength of Testing Data loader: 79, Batches of 128\n","output_type":"stream"}]},{"cell_type":"code","source":"train_features_batch, train_labels_batch = next(iter(train_data_loader))\ntrain_features_batch.shape, train_labels_batch.shape # [Batch_Size, Color_Channels, Height, Width] Color Channels First!","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:49:01.111451Z","iopub.execute_input":"2024-08-12T18:49:01.111880Z","iopub.status.idle":"2024-08-12T18:49:01.156404Z","shell.execute_reply.started":"2024-08-12T18:49:01.111848Z","shell.execute_reply":"2024-08-12T18:49:01.155558Z"},"trusted":true},"execution_count":90,"outputs":[{"execution_count":90,"output_type":"execute_result","data":{"text/plain":"(torch.Size([128, 1, 28, 28]), torch.Size([128]))"},"metadata":{}}]},{"cell_type":"code","source":"# Visualizing Images in the batch\n\nrandom_idx = torch.randint(0, len(train_features_batch), size=[1]).item()\n\nimg, label = train_features_batch[random_idx].squeeze(), train_labels_batch[random_idx]\nplt.imshow(img, cmap=\"gray\")\nplt.title(class_names[label])\nplt.axis(False)","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:49:01.157661Z","iopub.execute_input":"2024-08-12T18:49:01.157991Z","iopub.status.idle":"2024-08-12T18:49:01.329969Z","shell.execute_reply.started":"2024-08-12T18:49:01.157962Z","shell.execute_reply":"2024-08-12T18:49:01.329139Z"},"trusted":true},"execution_count":91,"outputs":[{"execution_count":91,"output_type":"execute_result","data":{"text/plain":"(-0.5, 27.5, 27.5, -0.5)"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAYUAAAGbCAYAAAAr/4yjAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAL4ElEQVR4nO3cT4jV5R7H8e8ZNUKFRAr7RylUUFpggqY5Oa7KYlyIZkHUrkVFRCEELZwhgqSgFq2CiDCSoIikrChwajINIahFmWDaItCNaGVJIL+76PIh8do959zTzJm5rxe48Mx5zvPgMPPmGed8W03TNAUAVTUw2QcAoH+IAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEK9K39+/fXI488UosXL645c+bUVVddVXfffXcdPHiw53t98cUXNTIyUidOnOj5a8NU0jL7iH61cePG2rNnT23atKluuummOnr0aL300kv166+/1r59+2rJkiU92+v555+vLVu21OHDh2vhwoU9e12YamZO9gHgfB5//PF644036oILLshjmzdvrhtvvLGeffbZev311yfxdDA9+fERfWvVqlVnBaGq6tprr63FixfXd99917N9RkZGasuWLVVVtWjRomq1WtVqterIkSO1YcOGuvnmm896/vDwcLVardq5c2ce+/LLL6vVatUHH3yQx3744YfatGlTzZ8/v2bPnl233HJLvf/++z07N/wTRIEppWmaOnbsWF188cU9e80NGzbUvffeW1VVL7zwQm3fvr22b99el1xySQ0ODtbXX39dP//8c/bfs2dPDQwM1Pj4eF5jfHy8BgYG6tZbb62qqmPHjtWqVavqo48+qoceeqieeeaZOn36dK1fv77eeeednp0deq6BKWT79u1NVTWvvPJKT1/3ueeea6qqOXz48FmP79+/v6mqZteuXU3TNM0333zTVFWzadOmZsWKFXne+vXrm6VLl+bvjz32WFNVzfj4eB775ZdfmkWLFjULFy5szpw509PzQ6+4KTBlHDhwoB5++OFauXJlPfDAAxOy59KlS2vu3Ln12WefVdWfN4Irr7yy7r///vrqq6/qt99+q6Zp6vPPP6/BwcGs27VrVy1fvrxWr16dx+bOnVsPPvhgHTlypL799tsJOT90yn80MyUcPXq07rrrrrrooovqrbfeqhkzZvzt83///fc6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"},"metadata":{}}]},{"cell_type":"code","source":"NOISE_DIM = 128","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:49:01.330885Z","iopub.execute_input":"2024-08-12T18:49:01.331130Z","iopub.status.idle":"2024-08-12T18:49:01.335476Z","shell.execute_reply.started":"2024-08-12T18:49:01.331108Z","shell.execute_reply":"2024-08-12T18:49:01.334615Z"},"trusted":true},"execution_count":92,"outputs":[]},{"cell_type":"code","source":"class Generator(nn.Module):\n    def __init__(self, noise_dim):\n        super(Generator, self).__init__()\n        \n        self.generator = nn.Sequential(\n            nn.Linear(noise_dim, 7*7*256),  # Upscale the noise vector to match the size required for the ConvTranspose layers\n            nn.BatchNorm1d(7*7*256),\n            nn.LeakyReLU(0.2, inplace=True),\n            \n            nn.Unflatten(1, (256, 7, 7)),  # Reshape to (batch_size, 256, 7, 7)\n            \n            nn.ConvTranspose2d(in_channels=256, out_channels=128, kernel_size=4, stride=2, padding=1),  # Output size: (128, 14, 14)\n            nn.BatchNorm2d(128),\n            nn.LeakyReLU(0.2, inplace=True), \n            \n            nn.ConvTranspose2d(in_channels=128, out_channels=64, kernel_size=4, stride=2, padding=1),  # Output size: (64, 28, 28)\n            nn.BatchNorm2d(64),\n            nn.LeakyReLU(0.2, inplace=True),      \n            \n            nn.ConvTranspose2d(in_channels=64, out_channels=1, kernel_size=3, stride=1, padding=1),  # Final output size: (1, 28, 28)\n            nn.Tanh()  # Output should be between -1 and 1\n        )\n        \n    def forward(self, batch):\n        return self.generator(batch)","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:49:01.336826Z","iopub.execute_input":"2024-08-12T18:49:01.337202Z","iopub.status.idle":"2024-08-12T18:49:01.346290Z","shell.execute_reply.started":"2024-08-12T18:49:01.337147Z","shell.execute_reply":"2024-08-12T18:49:01.345439Z"},"trusted":true},"execution_count":93,"outputs":[]},{"cell_type":"code","source":"class Discriminator(nn.Module):\n    def __init__(self):\n        super(Discriminator, self).__init__()\n\n        self.discriminator = nn.Sequential(\n            nn.Conv2d(\n                in_channels=1, out_channels=64, kernel_size=5, stride=2, padding=2\n            ),  # Output: (64, 14, 14)\n            nn.LeakyReLU(0.2, inplace=True),\n            nn.Dropout(0.3),\n            nn.Conv2d(\n                in_channels=64, out_channels=128, kernel_size=5, stride=2, padding=2\n            ),  # Output: (128, 7, 7)\n            nn.LeakyReLU(0.2, inplace=True),\n            nn.Dropout(0.3),\n            nn.Flatten(),  # Flatten to (batch_size, 128 * 7 * 7)\n            nn.Linear(\n                in_features=128 * 7 * 7, out_features=1\n            ),  # Output a single value (real/fake probability)\n        )\n\n    def forward(self, batch):\n        return self.discriminator(batch)","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:49:01.347272Z","iopub.execute_input":"2024-08-12T18:49:01.347528Z","iopub.status.idle":"2024-08-12T18:49:01.356566Z","shell.execute_reply.started":"2024-08-12T18:49:01.347506Z","shell.execute_reply":"2024-08-12T18:49:01.355893Z"},"trusted":true},"execution_count":94,"outputs":[]},{"cell_type":"code","source":"generator = Generator(noise_dim=NOISE_DIM)","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:49:01.357750Z","iopub.execute_input":"2024-08-12T18:49:01.358109Z","iopub.status.idle":"2024-08-12T18:49:01.388262Z","shell.execute_reply.started":"2024-08-12T18:49:01.358085Z","shell.execute_reply":"2024-08-12T18:49:01.387619Z"},"trusted":true},"execution_count":95,"outputs":[]},{"cell_type":"code","source":"# Generating a batch of noise vectors\nnoise = torch.randn(BATCH_SIZE, NOISE_DIM)\n\n# Pass the noise to the generator\nfake_images = generator(noise)\n\nprint(fake_images.shape)  # Should be (batch_size, 1, 28, 28)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:49:01.389087Z","iopub.execute_input":"2024-08-12T18:49:01.389323Z","iopub.status.idle":"2024-08-12T18:49:01.564778Z","shell.execute_reply.started":"2024-08-12T18:49:01.389301Z","shell.execute_reply":"2024-08-12T18:49:01.563820Z"},"trusted":true},"execution_count":96,"outputs":[{"name":"stdout","text":"torch.Size([128, 1, 28, 28])\n","output_type":"stream"}]},{"cell_type":"code","source":"discriminator = Discriminator()","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:49:01.566067Z","iopub.execute_input":"2024-08-12T18:49:01.566472Z","iopub.status.idle":"2024-08-12T18:49:01.574148Z","shell.execute_reply.started":"2024-08-12T18:49:01.566431Z","shell.execute_reply":"2024-08-12T18:49:01.573201Z"},"trusted":true},"execution_count":97,"outputs":[]},{"cell_type":"code","source":"discriminator(fake_images).squeeze(dim=1)","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:49:01.575212Z","iopub.execute_input":"2024-08-12T18:49:01.575507Z","iopub.status.idle":"2024-08-12T18:49:01.603520Z","shell.execute_reply.started":"2024-08-12T18:49:01.575483Z","shell.execute_reply":"2024-08-12T18:49:01.602631Z"},"trusted":true},"execution_count":98,"outputs":[{"execution_count":98,"output_type":"execute_result","data":{"text/plain":"tensor([-0.1746, -0.1003, -0.1625, -0.1330,  0.0653,  0.1832,  0.0777,  0.0294,\n        -0.0477, -0.0004, -0.1949, -0.0481, -0.0570, -0.1733,  0.0904, -0.0709,\n        -0.1054, -0.0019,  0.0354, -0.0137,  0.0201,  0.0671, -0.1822,  0.0878,\n         0.0022,  0.1005, -0.2464,  0.1487,  0.1596,  0.0240, -0.0849,  0.1274,\n         0.1697, -0.0398, -0.0536,  0.0383,  0.1248,  0.0016, -0.0537,  0.1580,\n        -0.1001, -0.0079,  0.0369, -0.1003, -0.0695, -0.0659, -0.0323, -0.1031,\n        -0.1549, -0.0533, -0.1209,  0.0033,  0.0602, -0.1327,  0.2887, -0.2699,\n         0.0684,  0.0395, -0.1253,  0.0328,  0.0409,  0.0765,  0.0342,  0.0253,\n         0.0699, -0.0447, -0.0243, -0.1189, -0.0565, -0.2515, -0.0455, -0.1103,\n         0.0458,  0.0983,  0.1184, -0.0752,  0.0345, -0.0380, -0.0986, -0.0902,\n        -0.1917, -0.0217,  0.0939, -0.0647, -0.0214, -0.0034,  0.0063,  0.0950,\n         0.0566, -0.1372, -0.0739,  0.0017, -0.0757,  0.0148,  0.0355,  0.0322,\n        -0.0487, -0.2707, -0.1072, -0.2181,  0.0052,  0.0541, -0.1440,  0.0197,\n         0.1666, -0.0127, -0.0867,  0.0662,  0.0184,  0.0452,  0.0132, -0.0007,\n         0.1076, -0.2516, -0.0108,  0.1421,  0.0305, -0.0050, -0.0716, -0.0400,\n        -0.0215, -0.0657, -0.0012,  0.0224, -0.0469,  0.1802, -0.1442,  0.0288],\n       grad_fn=<SqueezeBackward1>)"},"metadata":{}}]},{"cell_type":"code","source":"loss_fn = nn.BCEWithLogitsLoss()\ngenerator_optimizer = torch.optim.Adam(params=generator.parameters(), lr=0.0002)\ndiscriminator_optimizer = torch.optim.Adam(params=discriminator.parameters(), lr=0.0002)","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:49:01.604707Z","iopub.execute_input":"2024-08-12T18:49:01.604987Z","iopub.status.idle":"2024-08-12T18:49:01.610080Z","shell.execute_reply.started":"2024-08-12T18:49:01.604963Z","shell.execute_reply":"2024-08-12T18:49:01.609111Z"},"trusted":true},"execution_count":99,"outputs":[]},{"cell_type":"code","source":"def generator_loss(fake_output):\n    return loss_fn(torch.ones_like(fake_output), fake_output)","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:49:01.611210Z","iopub.execute_input":"2024-08-12T18:49:01.611475Z","iopub.status.idle":"2024-08-12T18:49:01.619619Z","shell.execute_reply.started":"2024-08-12T18:49:01.611452Z","shell.execute_reply":"2024-08-12T18:49:01.618758Z"},"trusted":true},"execution_count":100,"outputs":[]},{"cell_type":"code","source":"def discriminator_loss(real_output, fake_output):\n    real_loss = loss_fn(torch.ones_like(real_output), real_output)\n    fake_loss = loss_fn(torch.zeros_like(fake_output), fake_output)    \n    \n    return real_loss + fake_loss","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:49:01.620637Z","iopub.execute_input":"2024-08-12T18:49:01.620902Z","iopub.status.idle":"2024-08-12T18:49:01.629344Z","shell.execute_reply.started":"2024-08-12T18:49:01.620880Z","shell.execute_reply":"2024-08-12T18:49:01.628494Z"},"trusted":true},"execution_count":101,"outputs":[]},{"cell_type":"code","source":"device = 'cuda' if torch.cuda.is_available() else 'cpu'","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:49:01.630448Z","iopub.execute_input":"2024-08-12T18:49:01.631131Z","iopub.status.idle":"2024-08-12T18:49:01.638251Z","shell.execute_reply.started":"2024-08-12T18:49:01.631107Z","shell.execute_reply":"2024-08-12T18:49:01.637524Z"},"trusted":true},"execution_count":102,"outputs":[]},{"cell_type":"code","source":"def train_step(images: torch.Tensor,\n               generator: nn.Module,\n               discriminator: nn.Module,\n               batch_size: int,\n               noise_dim: int,\n               loss_fn: torch.nn.Module,\n               generator_optimizer: torch.optim.Optimizer,\n               discriminator_optimizer: torch.optim.Optimizer,\n               device: torch.device):\n\n    # Ensure models are on the correct device\n    images = images.to(device)\n    generator.to(device)\n    discriminator.to(device)\n    \n    # Set models to train mode\n    generator.train()\n    discriminator.train()\n\n    # Generating fake image noise\n    fake_image_noise = torch.randn([batch_size, noise_dim], device=device)\n    \n    # Generating fake images\n    generated_images = generator(fake_image_noise)\n    \n    # Forward pass for the discriminator with real images\n    real_output = discriminator(images)\n    \n    # Forward pass for the discriminator with fake images\n    fake_output = discriminator(generated_images.detach())  # Detach to avoid training the generator here\n    \n    # Calculate discriminator loss\n    real_loss = loss_fn(real_output, torch.ones_like(real_output, device=device))\n    fake_loss = loss_fn(fake_output, torch.zeros_like(fake_output, device=device))\n    disc_loss = real_loss + fake_loss\n    \n    # Backward pass and optimization step for the discriminator\n    discriminator_optimizer.zero_grad()\n    disc_loss.backward()\n    discriminator_optimizer.step()\n    \n    # Generator loss\n    fake_output_for_gen = discriminator(generated_images)  # Re-run the discriminator for generator training\n    gen_loss = loss_fn(fake_output_for_gen, torch.ones_like(fake_output_for_gen, device=device))\n    \n    # Backward pass and optimization step for the generator\n    generator_optimizer.zero_grad()\n    gen_loss.backward()\n    generator_optimizer.step()\n    \n    return gen_loss.item(), disc_loss.item()","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:49:01.639278Z","iopub.execute_input":"2024-08-12T18:49:01.639542Z","iopub.status.idle":"2024-08-12T18:49:01.649709Z","shell.execute_reply.started":"2024-08-12T18:49:01.639520Z","shell.execute_reply":"2024-08-12T18:49:01.648931Z"},"trusted":true},"execution_count":103,"outputs":[]},{"cell_type":"code","source":"# Timer Function\nfrom timeit import default_timer as timer\n\ndef display_train_time(start: float,\n                       end: float,\n                       device: torch.device=None):\n  total_time = end-start\n  print(f\"Train time on device {device}: {total_time:.3f} seconds\")\n\n  return total_time","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:49:01.654148Z","iopub.execute_input":"2024-08-12T18:49:01.654413Z","iopub.status.idle":"2024-08-12T18:49:01.662685Z","shell.execute_reply.started":"2024-08-12T18:49:01.654391Z","shell.execute_reply":"2024-08-12T18:49:01.661843Z"},"trusted":true},"execution_count":104,"outputs":[]},{"cell_type":"code","source":"epochs = 100\n\ntrain_start_time = timer()\n\nfor epoch in tqdm(range(epochs)):\n    print(f\"Epoch: {epoch+1}.\\n--------------------------------------\")\n    total_gen_loss = 0\n    total_disc_loss = 0\n    num_batches = len(train_data_loader)\n    \n    for batch in train_data_loader:\n        # Assuming each batch is a tuple (images, labels), we only need the images for GANs\n        if isinstance(batch, (list, tuple)):\n            images = batch[0]  # Extract images from the batch\n        else:\n            images = batch  # If it's not a tuple, it should be the images directly\n        \n        # Perform the training step and accumulate the losses\n        gen_loss, disc_loss = train_step(\n            images=images,\n            generator=generator,\n            discriminator=discriminator,\n            batch_size=BATCH_SIZE,\n            noise_dim=NOISE_DIM,\n            loss_fn=loss_fn,\n            generator_optimizer=generator_optimizer,\n            discriminator_optimizer=discriminator_optimizer,\n            device=device\n        )\n        \n        total_gen_loss += gen_loss\n        total_disc_loss += disc_loss\n    \n    # Calculate the average loss for the epoch\n    avg_gen_loss = total_gen_loss / num_batches\n    avg_disc_loss = total_disc_loss / num_batches\n    \n    print(f\"Average Generator Loss: {avg_gen_loss:.5f} | Average Discriminator Loss: {avg_disc_loss:.5f}\")\n        \n# Compute the time of the training\ntrain_end_time = timer()\n\ndisplay_train_time(train_start_time, train_end_time, device=next(generator.parameters()).device)","metadata":{"execution":{"iopub.status.busy":"2024-08-12T18:49:01.663672Z","iopub.execute_input":"2024-08-12T18:49:01.663948Z","iopub.status.idle":"2024-08-12T19:27:29.901849Z","shell.execute_reply.started":"2024-08-12T18:49:01.663926Z","shell.execute_reply":"2024-08-12T19:27:29.900936Z"},"trusted":true},"execution_count":105,"outputs":[{"output_type":"display_data","data":{"text/plain":"  0%|          | 0/100 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"9ffdfe11a0b8480f8066595ae0c12e66"}},"metadata":{}},{"name":"stdout","text":"Epoch: 1.\n--------------------------------------\nAverage Generator Loss: 9.45131 | Average Discriminator Loss: 0.10375\nEpoch: 2.\n--------------------------------------\nAverage Generator Loss: 8.78585 | Average Discriminator Loss: 0.08094\nEpoch: 3.\n--------------------------------------\nAverage Generator Loss: 7.92049 | Average Discriminator Loss: 0.00309\nEpoch: 4.\n--------------------------------------\nAverage Generator Loss: 9.06497 | Average Discriminator Loss: 0.00112\nEpoch: 5.\n--------------------------------------\nAverage Generator Loss: 9.75106 | Average Discriminator Loss: 0.00067\nEpoch: 6.\n--------------------------------------\nAverage Generator Loss: 10.39064 | Average Discriminator Loss: 0.00030\nEpoch: 7.\n--------------------------------------\nAverage Generator Loss: 10.79692 | Average Discriminator Loss: 0.00030\nEpoch: 8.\n--------------------------------------\nAverage Generator Loss: 10.00962 | Average Discriminator Loss: 0.07688\nEpoch: 9.\n--------------------------------------\nAverage Generator Loss: 8.13397 | Average Discriminator Loss: 0.00161\nEpoch: 10.\n--------------------------------------\nAverage Generator Loss: 9.33578 | Average Discriminator Loss: 0.00044\nEpoch: 11.\n--------------------------------------\nAverage Generator Loss: 9.87143 | Average Discriminator Loss: 0.00027\nEpoch: 12.\n--------------------------------------\nAverage Generator Loss: 7.43788 | Average Discriminator Loss: 0.19918\nEpoch: 13.\n--------------------------------------\nAverage Generator Loss: 3.65548 | Average Discriminator Loss: 0.50667\nEpoch: 14.\n--------------------------------------\nAverage Generator Loss: 2.49673 | Average Discriminator Loss: 0.62294\nEpoch: 15.\n--------------------------------------\nAverage Generator Loss: 2.32470 | Average Discriminator Loss: 0.64397\nEpoch: 16.\n--------------------------------------\nAverage Generator Loss: 2.28779 | Average Discriminator Loss: 0.67124\nEpoch: 17.\n--------------------------------------\nAverage Generator Loss: 2.05364 | Average Discriminator Loss: 0.76203\nEpoch: 18.\n--------------------------------------\nAverage Generator Loss: 2.57423 | Average Discriminator Loss: 0.88875\nEpoch: 19.\n--------------------------------------\nAverage Generator Loss: 1.96272 | Average Discriminator Loss: 0.84820\nEpoch: 20.\n--------------------------------------\nAverage Generator Loss: 1.73201 | Average Discriminator Loss: 0.90540\nEpoch: 21.\n--------------------------------------\nAverage Generator Loss: 1.60627 | Average Discriminator Loss: 0.93460\nEpoch: 22.\n--------------------------------------\nAverage Generator Loss: 1.59018 | Average Discriminator Loss: 0.93154\nEpoch: 23.\n--------------------------------------\nAverage Generator Loss: 1.55711 | Average Discriminator Loss: 0.96241\nEpoch: 24.\n--------------------------------------\nAverage Generator Loss: 1.48477 | Average Discriminator Loss: 0.97906\nEpoch: 25.\n--------------------------------------\nAverage Generator Loss: 1.43975 | Average Discriminator Loss: 1.01457\nEpoch: 26.\n--------------------------------------\nAverage Generator Loss: 1.44178 | Average Discriminator Loss: 1.02737\nEpoch: 27.\n--------------------------------------\nAverage Generator Loss: 1.36408 | Average Discriminator Loss: 1.05069\nEpoch: 28.\n--------------------------------------\nAverage Generator Loss: 1.34387 | Average Discriminator Loss: 1.05423\nEpoch: 29.\n--------------------------------------\nAverage Generator Loss: 1.33173 | Average Discriminator Loss: 1.06714\nEpoch: 30.\n--------------------------------------\nAverage Generator Loss: 1.29600 | Average Discriminator Loss: 1.08272\nEpoch: 31.\n--------------------------------------\nAverage Generator Loss: 1.28913 | Average Discriminator Loss: 1.08995\nEpoch: 32.\n--------------------------------------\nAverage Generator Loss: 1.28948 | Average Discriminator Loss: 1.09351\nEpoch: 33.\n--------------------------------------\nAverage Generator Loss: 1.24211 | Average Discriminator Loss: 1.11730\nEpoch: 34.\n--------------------------------------\nAverage Generator Loss: 1.22034 | Average Discriminator Loss: 1.11840\nEpoch: 35.\n--------------------------------------\nAverage Generator Loss: 1.22451 | Average Discriminator Loss: 1.10940\nEpoch: 36.\n--------------------------------------\nAverage Generator Loss: 1.21987 | Average Discriminator Loss: 1.12212\nEpoch: 37.\n--------------------------------------\nAverage Generator Loss: 1.19961 | Average Discriminator Loss: 1.11936\nEpoch: 38.\n--------------------------------------\nAverage Generator Loss: 1.19074 | Average Discriminator Loss: 1.12610\nEpoch: 39.\n--------------------------------------\nAverage Generator Loss: 1.19183 | Average Discriminator Loss: 1.12705\nEpoch: 40.\n--------------------------------------\nAverage Generator Loss: 1.21365 | Average Discriminator Loss: 1.13495\nEpoch: 41.\n--------------------------------------\nAverage Generator Loss: 1.17336 | Average Discriminator Loss: 1.14292\nEpoch: 42.\n--------------------------------------\nAverage Generator Loss: 1.15566 | Average Discriminator Loss: 1.14893\nEpoch: 43.\n--------------------------------------\nAverage Generator Loss: 1.16299 | Average Discriminator Loss: 1.14669\nEpoch: 44.\n--------------------------------------\nAverage Generator Loss: 1.15493 | Average Discriminator Loss: 1.16505\nEpoch: 45.\n--------------------------------------\nAverage Generator Loss: 1.13086 | Average Discriminator Loss: 1.15724\nEpoch: 46.\n--------------------------------------\nAverage Generator Loss: 1.10052 | Average Discriminator Loss: 1.16747\nEpoch: 47.\n--------------------------------------\nAverage Generator Loss: 1.11533 | Average Discriminator Loss: 1.17307\nEpoch: 48.\n--------------------------------------\nAverage Generator Loss: 1.08771 | Average Discriminator Loss: 1.17611\nEpoch: 49.\n--------------------------------------\nAverage Generator Loss: 1.09875 | Average Discriminator Loss: 1.18495\nEpoch: 50.\n--------------------------------------\nAverage Generator Loss: 1.06483 | Average Discriminator Loss: 1.18268\nEpoch: 51.\n--------------------------------------\nAverage Generator Loss: 1.04443 | Average Discriminator Loss: 1.19428\nEpoch: 52.\n--------------------------------------\nAverage Generator Loss: 1.07234 | Average Discriminator Loss: 1.20413\nEpoch: 53.\n--------------------------------------\nAverage Generator Loss: 1.09676 | Average Discriminator Loss: 1.21235\nEpoch: 54.\n--------------------------------------\nAverage Generator Loss: 1.07864 | Average Discriminator Loss: 1.20978\nEpoch: 55.\n--------------------------------------\nAverage Generator Loss: 1.06492 | Average Discriminator Loss: 1.21423\nEpoch: 56.\n--------------------------------------\nAverage Generator Loss: 1.04964 | Average Discriminator Loss: 1.19272\nEpoch: 57.\n--------------------------------------\nAverage Generator Loss: 1.01263 | Average Discriminator Loss: 1.20927\nEpoch: 58.\n--------------------------------------\nAverage Generator Loss: 1.00929 | Average Discriminator Loss: 1.21883\nEpoch: 59.\n--------------------------------------\nAverage Generator Loss: 1.02222 | Average Discriminator Loss: 1.22420\nEpoch: 60.\n--------------------------------------\nAverage Generator Loss: 1.02504 | Average Discriminator Loss: 1.23637\nEpoch: 61.\n--------------------------------------\nAverage Generator Loss: 1.02603 | Average Discriminator Loss: 1.22304\nEpoch: 62.\n--------------------------------------\nAverage Generator Loss: 1.01426 | Average Discriminator Loss: 1.23503\nEpoch: 63.\n--------------------------------------\nAverage Generator Loss: 1.02223 | Average Discriminator Loss: 1.23068\nEpoch: 64.\n--------------------------------------\nAverage Generator Loss: 1.00834 | Average Discriminator Loss: 1.23690\nEpoch: 65.\n--------------------------------------\nAverage Generator Loss: 1.00202 | Average Discriminator Loss: 1.23241\nEpoch: 66.\n--------------------------------------\nAverage Generator Loss: 0.99628 | Average Discriminator Loss: 1.23932\nEpoch: 67.\n--------------------------------------\nAverage Generator Loss: 1.00401 | Average Discriminator Loss: 1.23037\nEpoch: 68.\n--------------------------------------\nAverage Generator Loss: 0.99726 | Average Discriminator Loss: 1.24337\nEpoch: 69.\n--------------------------------------\nAverage Generator Loss: 0.98104 | Average Discriminator Loss: 1.23711\nEpoch: 70.\n--------------------------------------\nAverage Generator Loss: 0.97324 | Average Discriminator Loss: 1.24768\nEpoch: 71.\n--------------------------------------\nAverage Generator Loss: 0.97657 | Average Discriminator Loss: 1.25282\nEpoch: 72.\n--------------------------------------\nAverage Generator Loss: 0.96810 | Average Discriminator Loss: 1.24114\nEpoch: 73.\n--------------------------------------\nAverage Generator Loss: 0.96082 | Average Discriminator Loss: 1.25480\nEpoch: 74.\n--------------------------------------\nAverage Generator Loss: 0.97662 | Average Discriminator Loss: 1.24459\nEpoch: 75.\n--------------------------------------\nAverage Generator Loss: 0.96054 | Average Discriminator Loss: 1.24567\nEpoch: 76.\n--------------------------------------\nAverage Generator Loss: 0.93742 | Average Discriminator Loss: 1.25499\nEpoch: 77.\n--------------------------------------\nAverage Generator Loss: 0.94999 | Average Discriminator Loss: 1.25646\nEpoch: 78.\n--------------------------------------\nAverage Generator Loss: 0.93489 | Average Discriminator Loss: 1.25841\nEpoch: 79.\n--------------------------------------\nAverage Generator Loss: 0.93679 | Average Discriminator Loss: 1.26601\nEpoch: 80.\n--------------------------------------\nAverage Generator Loss: 0.94808 | Average Discriminator Loss: 1.26125\nEpoch: 81.\n--------------------------------------\nAverage Generator Loss: 0.94929 | Average Discriminator Loss: 1.26417\nEpoch: 82.\n--------------------------------------\nAverage Generator Loss: 0.92595 | Average Discriminator Loss: 1.26123\nEpoch: 83.\n--------------------------------------\nAverage Generator Loss: 0.93687 | Average Discriminator Loss: 1.26547\nEpoch: 84.\n--------------------------------------\nAverage Generator Loss: 0.93588 | Average Discriminator Loss: 1.26335\nEpoch: 85.\n--------------------------------------\nAverage Generator Loss: 0.93192 | Average Discriminator Loss: 1.26427\nEpoch: 86.\n--------------------------------------\nAverage Generator Loss: 0.92300 | Average Discriminator Loss: 1.27333\nEpoch: 87.\n--------------------------------------\nAverage Generator Loss: 0.93112 | Average Discriminator Loss: 1.26673\nEpoch: 88.\n--------------------------------------\nAverage Generator Loss: 0.93610 | Average Discriminator Loss: 1.26671\nEpoch: 89.\n--------------------------------------\nAverage Generator Loss: 0.92236 | Average Discriminator Loss: 1.27183\nEpoch: 90.\n--------------------------------------\nAverage Generator Loss: 0.90964 | Average Discriminator Loss: 1.26878\nEpoch: 91.\n--------------------------------------\nAverage Generator Loss: 0.90731 | Average Discriminator Loss: 1.27063\nEpoch: 92.\n--------------------------------------\nAverage Generator Loss: 0.92273 | Average Discriminator Loss: 1.27758\nEpoch: 93.\n--------------------------------------\nAverage Generator Loss: 0.93930 | Average Discriminator Loss: 1.26709\nEpoch: 94.\n--------------------------------------\nAverage Generator Loss: 0.91995 | Average Discriminator Loss: 1.26878\nEpoch: 95.\n--------------------------------------\nAverage Generator Loss: 0.92254 | Average Discriminator Loss: 1.27399\nEpoch: 96.\n--------------------------------------\nAverage Generator Loss: 0.91675 | Average Discriminator Loss: 1.27719\nEpoch: 97.\n--------------------------------------\nAverage Generator Loss: 0.92449 | Average Discriminator Loss: 1.28286\nEpoch: 98.\n--------------------------------------\nAverage Generator Loss: 0.91434 | Average Discriminator Loss: 1.28123\nEpoch: 99.\n--------------------------------------\nAverage Generator Loss: 0.91026 | Average Discriminator Loss: 1.27682\nEpoch: 100.\n--------------------------------------\nAverage Generator Loss: 0.90160 | Average Discriminator Loss: 1.27898\nTrain time on device cuda:0: 2308.221 seconds\n","output_type":"stream"},{"execution_count":105,"output_type":"execute_result","data":{"text/plain":"2308.2211516319994"},"metadata":{}}]},{"cell_type":"code","source":"# Testing\nSAMPLES_TO_GENERATE = 16\n\nfake_image_noise = torch.randn([SAMPLES_TO_GENERATE, NOISE_DIM], device=device)\ngenerated_images = generator(fake_image_noise)\ngenerated_images.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-12T19:32:40.383656Z","iopub.execute_input":"2024-08-12T19:32:40.384253Z","iopub.status.idle":"2024-08-12T19:32:40.392190Z","shell.execute_reply.started":"2024-08-12T19:32:40.384225Z","shell.execute_reply":"2024-08-12T19:32:40.391319Z"},"trusted":true},"execution_count":109,"outputs":[{"execution_count":109,"output_type":"execute_result","data":{"text/plain":"torch.Size([16, 1, 28, 28])"},"metadata":{}}]},{"cell_type":"code","source":"def denormalize(image_tensor):\n    # De-normalize to [0, 1]\n    image_tensor = (image_tensor + 1) / 2\n    \n    # Move tensor to CPU and convert to numpy array\n    image_tensor = image_tensor.detach().cpu().numpy()\n    \n    # If the image is grayscale (single channel), remove the channel dimension\n    if image_tensor.shape[0] == 1:\n        image_tensor = image_tensor.squeeze(0)\n        \n    return image_tensor","metadata":{"execution":{"iopub.status.busy":"2024-08-12T19:43:33.518027Z","iopub.execute_input":"2024-08-12T19:43:33.518773Z","iopub.status.idle":"2024-08-12T19:43:33.523886Z","shell.execute_reply.started":"2024-08-12T19:43:33.518741Z","shell.execute_reply":"2024-08-12T19:43:33.522922Z"},"trusted":true},"execution_count":128,"outputs":[]},{"cell_type":"code","source":"# Plotting the images\nplt.figure(figsize=(10, 10))\n\nfor i, image in enumerate(generated_images):\n    denormalized_image = denormalize(image)\n    \n    plt.subplot(4, 4, i + 1)  # Update subplot index\n    plt.axis(False)\n    \n    # Show the image\n    plt.imshow(denormalized_image, cmap=\"gray\")\n\n# Display all images\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-12T19:43:34.161326Z","iopub.execute_input":"2024-08-12T19:43:34.161700Z","iopub.status.idle":"2024-08-12T19:43:34.689408Z","shell.execute_reply.started":"2024-08-12T19:43:34.161668Z","shell.execute_reply":"2024-08-12T19:43:34.688496Z"},"trusted":true},"execution_count":129,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x1000 with 16 Axes>","image/png":""},"metadata":{}}]}]}